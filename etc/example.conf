#
# xmppd: a small XMPP server
# example.conf: example configuration file
#
# Copyright (c) 2006 Eric Will <rakaur@malkier.net>
#
# $Id: version.rb 4 2004-12-19 16:38:59Z rakaur $
#
 
# IMPORTANT NOTES:
#
# All statements end in semi-colons (';').
#
# Shell style and C++ style comments can be used.
# C style comments may not be used.
#
# Items marked with "(*)" are changeable with SIGHUP.

#
# hosts{}
#
# This block defines hosts this daemon will service.
#
hosts {
    "example.net";
    "example.com";
};

#
# logging{}
#
# This block defines logging behavior.
#
logging {
    // enable
    // Enable logging?
    enable;

    // xmppd_path
    // The path and filename for the general log file?
    xmppd_path = "var/logs/xmppd.log";

    // c2s_path
    // The path and filename for the client-to-server log file?
    c2s_path = "var/logs/c2s.log";

    // s2s_path
    // The path and filename for the server-to-server log file?
    s2s_path = "var/logs/s2s.log";

    // level
    // The verbosity level of the logging system.
    // Can be one of: debug, info, warning, error, fatal.
    level = debug;
};

#
# listen{}
#
# This block defines what ports to listen on.
#
listen {
    // c2s
    // client-to-server ports. You must define at least one.
    // Entries are in the form of host:port.
    c2s {
        *:5222;
    };

    // s2s
    // server-to-server ports. Omitting this effectively
    // disables server-to-server communications.
    // Entries are in the form of host:port.
    s2s {
        *:5269;
    };
};

#
# auth{}
#
# These block define who may connect to this service.
#
auth {
    // This auth allows everyone to connect.
    match = "/(.*)/";
};

auth {
    // host
    // Defines a host this auth matches.
    // Must be a quad-dotted IP address.
    host = "192.168.0.1";

    // match
    // Defines a pattern this auth matches.
    // Must be a valid Ruby regular expression.
    match = "/192\.168\.1\.(\d+)/";

    // flags
    // Defines special behavior for hosts
    // matching this auth.
    //
    // plain       => may use non-TLS stream
    // legacy_auth => may use non-SASL authentication (JEP-0078)
    #flags { plain; legacy_auth; };
};

auth {
   // This auth allows someone with an old
   // client to connect.
   host = "192.168.1.12";
   flags { plain; legacy_auth; };
};

# This is here just to make sure you're paying attention.
die;

#
# deny{}
#
# These blocks specifically deny hosts connection.
#
deny {
    // host
    // Defines a host this auth matches. 
    // Must be a quad-dotted IP address.
    host = "127.0.0.1";

    // match
    // Defines a pattern this auth matches.
    // Must be a valid Ruby regular expression.
    match = "/192\.168\.2\.(\d+)/";
};

#
# operator{}
#
# These blocks define special users that are
# allowed to perform administrative operations.
#
operator "user@example.org" {
    // flags
    // Defines privileges for this user.
    //
    // announce => may send server-wide messages
    flags = { announce; };
};
